package leetcode.graph;

import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;

/*
 N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.

The people and seats are represented by an integer from 0 to 2N-1, the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).

The couples' initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat.

Example 1:

Input: row = [0, 2, 1, 3]
Output: 1
Explanation: We only need to swap the second (row[1]) and third (row[2]) person.
Example 2:

Input: row = [3, 2, 0, 1]
Output: 0
Explanation: All couples are already seated side by side.
 */

public class L765CouplesHoldingHands {

	public static void main(String[] args) {
		HashMap<String, int[]> test = new HashMap<String, int[]>();
		int[] a = {0, 1};
		int[] b = {1, 2};
		test.put("a", a);
		test.put("b", b);
		int[] intArray = new int[2];
		String[] strArray = {"a", "b", "c", "b","c"};
		for(int i = 0; i < strArray.length; i++) {
			if(test.containsKey(strArray[i])) {
				test.get(strArray[i])[0] += 1;
				test.get(strArray[i])[1] += 2;
			} else {
				intArray[0] = 0;
				intArray[1] = 1;
				test.put(strArray[i], intArray);
			}
		}
		
		for(Map.Entry<String, int[]> entry : test.entrySet()) {
			System.out.println(entry.getKey() + " " +  entry.getValue()[0] + " " + entry.getValue()[0]);
		}

	}

}
